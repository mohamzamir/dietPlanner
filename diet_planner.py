# Import required libraries
import json
import openai
import os

# Initialize OpenAI client with API key
# NOTE: In production, use environment variables for API keys instead of hardcoding
client = openai.OpenAI(
    api_key="")


def optimize_menu_data(menu_data):
    """Simplify the JSON structure to reduce token usage in API calls.

    Args:
        menu_data: Original nested menu data containing locations, categories, and items

    Returns:
        Optimized dictionary with shortened item names and removed redundant fields
    """
    optimized = {}
    for location, categories in menu_data.items():
        optimized[location] = {}
        for category, details in categories.items():
            # Skip URL fields and categories without menu items
            if "menu_items" in details:
                optimized_items = {}
                for item, calories in details["menu_items"].items():
                    # Shorten item names by:
                    # 1. Taking only the part before first comma
                    # 2. Removing common redundant descriptors
                    short_name = item.split(",")[0] \
                        .replace("Fresh", "") \
                        .replace("Chopped", "") \
                        .strip()
                    optimized_items[short_name] = calories
                optimized[location][category] = optimized_items
    return optimized


def generate_diet_plan(menu_data, user_profile):
    """Generate personalized diet plan using OpenAI's API with token optimization techniques.

    Args:
        menu_data: Optimized menu data structure
        user_profile: Dictionary containing user's dietary preferences and goals

    Returns:
        Markdown-formatted diet plan generated by AI
    """
    # System prompt defines the AI's role and output requirements
    system_prompt = """You are a nutritionist. Use this simplified menu to create a diet plan with:
    - Meal sections (Breakfast, Snacks, Lunch, Dinner)
    - Item names with calories from the menu
    - Total daily calories
    - Nutrition tips"""

    # Convert menu data to JSON string and truncate to 15,000 characters
    # This helps manage token usage while preserving data structure
    truncated_menu = json.dumps(menu_data)[:15000]

    # Create API request with optimized parameters
    response = client.chat.completions.create(
        model="gpt-4-1106-preview",  # Use model with 128k token context window
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"""
            Create a {user_profile['calorie_goal']} calorie plan for:
            Preferences: {user_profile['dietary_prefs']}
            Allergies: {user_profile['allergies']}
            Goals: {user_profile['goals']}

            Menu (simplified): {truncated_menu}

            Respond in markdown format with sections."""
             }
        ],
        max_tokens=1000  # Limit response length to control costs
    )
    return response.choices[0].message.content


# Load and preprocess menu data from JSON file
# This demonstrates a typical data loading workflow
with open("updated_menu_with_calories.json") as f:
    raw_data = json.load(f)
optimized_data = optimize_menu_data(raw_data)

# Example user profile - would typically come from user input
user_profile = {
    "calorie_goal": "1800-2000",
    "dietary_prefs": "balanced",
    "allergies": "none",
    "goals": "weight maintenance"
}

# Generate and output the diet plan
# This shows the end-to-end workflow from data processing to AI output
diet_plan = generate_diet_plan(optimized_data, user_profile)
print(diet_plan)